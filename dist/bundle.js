!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class r{constructor(e,t){this.firstName=e,this.lastName=t}printFullName(){console.log(`${this.lastName} ${this.firstName}`)}}class o{provideData(){return[new r("����","���������"),new r("����","������"),new r("���������","�����"),new r("��������","�������"),new r("�������","�����")]}}new r("Yuriy","Avidisyan").printFullName(),(new class{learnMap(){let e=(new o).provideData().map((e,t,n)=>e.firstName);console.log(e)}learnFilter(){let e=(new o).provideData().filter((e,t,n)=>e.firstName.startsWith("�",0));console.log(e)}learnReduce(){let e=[1,4,5,7,10].reduce((e,t)=>e*t,1);console.log(e)}learnSomeEvery(){let e=(new o).provideData(),t=e.some(e=>"����"===e.firstName);console.log(t);let n=e.every(e=>"����"===e.firstName);console.log(n)}learnIncludes(){let e=(new o).provideData(),t=e.includes(e[3]);console.log(t);let n=Object.assign({},e[3]),r=e.includes(n);console.log(r)}learnIterable(){(new o).provideData().entries()}}).learnIncludes()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,